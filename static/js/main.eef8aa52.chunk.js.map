{"version":3,"sources":["components/RocketLaunchDetails.js","loadRocket.gif","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["RocketLaunchDetails","details","flight_number","mission_name","mission_id","launch_year","launch_success","links","rocket","imgSrc","mission_patch_small","land_success","first_stage","cores","Card","className","src","alt","API_URL","App","props","state","items","isLoaded","filters","limit","undefined","querystring","stringify","URL","this","getUpdatedApiUrl","setState","fetch","then","response","json","data","fetchAPI","type","value","uniqueLaunchYears","Array","fill","map","_","index","Container","fluid","Row","Body","Title","Text","year","Button","variant","toString","onClick","e","updateApiFilters","target","loader","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.eef8aa52.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport \"./RocketLaunchDetails.css\";\r\n\r\nfunction RocketLaunchDetails({ details }) {\r\n  const {\r\n    flight_number,\r\n    mission_name,\r\n    mission_id,\r\n    launch_year,\r\n    launch_success,\r\n    links,\r\n    rocket,\r\n  } = details;\r\n  const imgSrc = links.mission_patch_small;\r\n  const land_success = rocket.first_stage.cores[0].land_success;\r\n\r\n  return (\r\n    <Card className=\"Rocket-details-card\">\r\n      <div key={flight_number}>\r\n        <div>\r\n          <img\r\n            src={imgSrc}\r\n            alt=\"mission patch img not available on api\"\r\n            className=\"Rocket-mission-image\"\r\n          />\r\n        </div>\r\n        <div className=\"Rocket-mission-name-flight-number\">\r\n          {mission_name} #{flight_number}\r\n        </div>\r\n        <div className=\"Rocket-detail-label\">\r\n          Mission Ids:{\" \"}\r\n          <ul>\r\n            {\" \"}\r\n            <li className=\"Rocket-detail-value\">{mission_id}</li>\r\n          </ul>\r\n        </div>\r\n        <div className=\"Rocket-detail-label\">\r\n          Launch Year:{\" \"}\r\n          <span className=\"Rocket-detail-value\">{launch_year}</span>\r\n        </div>\r\n        <div className=\"Rocket-detail-label\">\r\n          Successful Launch:{\" \"}\r\n          <span className=\"Rocket-detail-value\">\r\n            {launch_success ? \"true\" : \"false\"}\r\n          </span>\r\n        </div>\r\n        <div className=\"Rocket-detail-label\">\r\n          Successful Landing:{\" \"}\r\n          <span className=\"Rocket-detail-value\">\r\n            {land_success ? \"true\" : \"false\"}\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default RocketLaunchDetails;\r\n","export default __webpack_public_path__ + \"static/media/loadRocket.03d83b7e.gif\";","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container, Card, Button, Row, Col } from 'react-bootstrap';\nimport RocketLaunchDetails from './components/RocketLaunchDetails';\nimport querystring from 'querystring';\nimport './App.css';\nimport loader from './loadRocket.gif';\n\nconst API_URL = \"https://api.spacexdata.com/v3/launches?limit=100\";\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [],\n      isLoaded: false,\n      filters: {\n        limit: 150,\n        launch_year: undefined,\n        launch_success: undefined,\n        land_success: undefined,\n      },\n    }\n\n  }\n\n  getUpdatedApiUrl(filters = {}) {\n    return API_URL + querystring.stringify({ ...filters });\n  }\n\n  fetchAPI(filters) {\n    const URL = this.getUpdatedApiUrl(filters);\n    this.setState({ isLoaded: false, filters });\n    fetch(URL)\n      .then(response => response.json())\n      .then(data => {\n        this.setState({\n          isLoaded: true,\n          data\n        });\n      });\n  }\n\n  componentDidMount() {\n    this.fetchAPI(this.state.filters);\n  }\n\n  updateApiFilters(type, value) {\n    // if same value is clicked, we remove that filter\n    if (this.state.filters[type] === value) {\n      value = undefined;\n    }\n\n    const filters = {\n      ...this.state.filters,\n      [type]: value,\n    };\n\n    this.fetchAPI(filters);\n  }\n\n\n  render() {\n\n    const { isLoaded, data } = this.state;\n    const uniqueLaunchYears = new Array(16).fill(0).map((_, index) => 2006 + index);\n\n    if (!isLoaded) {\n      return <div className=\"Rocket_Launch_Loader\">\n        <div className=\"App-loader-box\">\n          <img src={loader} alt=\"loading...\" />\n        </div>\n      </div>\n    }\n\n    else {\n\n      return (\n        <div className=\"SpaceXApp\">\n          <h1 className=\"App-header\">SpaceX Launch Programs</h1>\n          <Container fluid>\n            <Row>\n              <div className=\"col-lg-3 col-md-3 col-sm-12 col-12\">\n                <Card className=\"App-filter-card\">\n                  <Card.Body>\n                    <Card.Title className=\"App-filter-header\">\n                      <b>Filters</b>\n                    </Card.Title>\n                    <Card.Text className=\"App-filter-heading-launch-year\">\n                      Launch Year\n                      <hr className=\"App-filters-hr\" />\n                    </Card.Text>\n\n                    <Row>\n                      <div className=\"App-filter-button-container\">\n                        {uniqueLaunchYears.map((year) => {\n                          return (\n                            <Button\n                              className=\"App-filter-button\"\n                              variant={\n                                this.state.filters.launch_year ===\n                                year.toString()\n                                  ? \"success\"\n                                  : \"outline-success\"\n                              }\n                              value={year}\n                              onClick={(e) =>\n                                this.updateApiFilters(\n                                  \"launch_year\",\n                                  e.target.value\n                                )\n                              }\n                            >\n                              {year}\n                            </Button>\n                          );\n                        })}\n                      </div>\n                    </Row>\n\n                    <Card.Text className=\"App-filter-heading\">\n                      Successful Launch\n                      <hr className=\"App-filters-hr\" />\n                    </Card.Text>\n\n                    <div className=\"App-filter-button-container\">\n                      <Button\n                        className=\"App-filter-button\"\n                        variant={\n                          this.state.filters.launch_success === \"true\"\n                            ? \"success\"\n                            : \"outline-success\"\n                        }\n                        onClick={(e) =>\n                          this.updateApiFilters(\n                            \"launch_success\",\n                            e.target.value\n                          )\n                        }\n                        value=\"true\"\n                      >\n                        True\n                      </Button>\n\n                      <Button\n                        className=\"App-filter-button\"\n                        variant={\n                          this.state.filters.launch_success === \"false\"\n                            ? \"success\"\n                            : \"outline-success\"\n                        }\n                        onClick={(e) =>\n                          this.updateApiFilters(\n                            \"launch_success\",\n                            e.target.value\n                          )\n                        }\n                        value=\"false\"\n                      >\n                        False\n                      </Button>\n                    </div>\n\n                    <Card.Text className=\"App-filter-heading\">\n                      Successful Landing\n                      <hr className=\"App-filters-hr\" />\n                    </Card.Text>\n                    <div className=\"App-filter-button-container\">\n                      <Button\n                        className=\"App-filter-button\"\n                        variant={\n                          this.state.filters.land_success === \"true\"\n                            ? \"success\"\n                            : \"outline-success\"\n                        }\n                        onClick={(e) =>\n                          this.updateApiFilters(\"land_success\", e.target.value)\n                        }\n                        value=\"true\"\n                      >\n                        True\n                      </Button>\n\n                      <Button\n                        className=\"App-filter-button\"\n                        variant={\n                          this.state.filters.land_success === \"false\"\n                            ? \"success\"\n                            : \"outline-success\"\n                        }\n                        onClick={(e) =>\n                          this.updateApiFilters(\"land_success\", e.target.value)\n                        }\n                        value=\"false\"\n                      >\n                        False\n                      </Button>\n                    </div>\n                  </Card.Body>\n                </Card>\n              </div>\n\n              <div className=\"col-lg-9 col-md-9 col-sm-12 col-12\">\n                <Row>\n                  {data.map((details) => {\n                    return (\n                      <div className=\"col-md-6 col-lg-3 card_tab\">\n                        <RocketLaunchDetails details={details} />\n                      </div>\n                    );\n                  })}\n                </Row>\n              </div>\n            </Row>\n            <div>\n              <h5 className=\"justify-content-center d-flex\">\n                Developed by : Rahul David Dudde\n              </h5>\n            </div>\n          </Container>\n        </div>\n      );\n    }\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}